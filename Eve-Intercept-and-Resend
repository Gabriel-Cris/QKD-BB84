import numpy as np

def eve_intercept_and_resend(eve_attack_level, number_of_photons, alice_polarized_photons_states):
    # Integer number of photons that shall be attacked
    attack_occ = int(np.ceil(eve_attack_level * number_of_photons))
    
    # Generate random indices for the pulses that will be attacked
    random_pulses_number_attacked = np.random.choice(number_of_photons, attack_occ, replace=False)
    
    # Random basis selection for Eve
    eve_bases_selection = np.round(np.random.rand(attack_occ)).astype(int)
    
    # Random photons that Eve has measured
    selected_indices = alice_polarized_photons_states[random_pulses_number_attacked]
    
    # Computing the output states of the photons that Eve has attacked
    new_states = np.zeros(attack_occ, dtype=int)

    for i in range(attack_occ):
        if eve_bases_selection[i] == 0 and (selected_indices[i] == 1 or selected_indices[i] == 2):
            measured_state = selected_indices[i]  # no change
        elif eve_bases_selection[i] == 1 and (selected_indices[i] == 3 or selected_indices[i] == 4):
            measured_state = selected_indices[i]  # no change
        elif eve_bases_selection[i] == 0 and (selected_indices[i] == 3 or selected_indices[i] == 4):
            measured_state = np.random.choice([1, 2])  # 50% chance horizontal or vertical
        elif eve_bases_selection[i] == 1 and (selected_indices[i] == 1 or selected_indices[i] == 2):
            measured_state = np.random.choice([3, 4])  # 50% chance right- or left-circular
        
        new_states[i] = measured_state

    # Putting the untempered and tempered photon states together
    alice_polarized_photons_states[random_pulses_number_attacked] = new_states
    polarization_states_after_eve_attack_if_present = alice_polarized_photons_states

    return polarization_states_after_eve_attack_if_present, eve_bases_selection
